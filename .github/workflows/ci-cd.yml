name: AWS CI CD
on:
    push:
        paths:
            - "chaekit-spring/**"
        branches:
            - feat/be/entity

permissions:
    id-token: write
    contents: read

jobs:
    build-docker-image:
        runs-on: ubuntu-latest
        env:
            #  공개해도 무방한 설정값
            JWT_EXPIRATION_MS: 3600000
            ADMIN_USERNAME: admin
            SPRING_PROFILES_ACTIVE: prod
            EBOOK_BUCKET_NAME: chaekit
            AWS_S3_REGION: ap-northeast-2
            EBOOK_MAX_FILE_SIZE: 20971520
            PRESIGNED_URL_EXPIRATION_TIME: 3600
            CORS_ALLOWED_ORIGINS: http://localhost:5173/

            #  GitHub Secrets에서 불러올 민감한 정보
            DB_URL: ${{ secrets.DB_URL }}
            DB_USERNAME: ${{ secrets.DB_USERNAME }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
        steps:
            - uses: actions/checkout@v3

            - name: Change directory to chaekit-spring
              run: cd chaekit-spring

            # Java 17 세팅
            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: "17"
                  distribution: "temurin"

            # gradlew 권한 설정
            - name: Grant execute permission for gradlew
              run: cd chaekit-spring && chmod +x gradlew

            # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
            - name: Build with Gradle
              run: cd chaekit-spring && ./gradlew build -x test

            # AWS 로그인
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: arn:aws:iam::880996438467:role/allow
                  role-session-name: sampleSessionName
                  aws-region: ap-northeast-2

            #ECR에 로그인
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            #이미지를 빌드하고 ECR에 push
            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: chaekit/chaekit_spirngbackend
                  IMAGE_TAG: latest
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f chaekit-spring/Dockerfile chaekit-spring/
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            - name: Build Image Path
              id: image-path
              env:
                  ECR_REGISTRY: 880996438467.dkr.ecr.ap-northeast-2.amazonaws.com
                  ECR_REPOSITORY: chaekit/chaekit_spirngbackend
                  IMAGE_TAG: latest
              run: |
                  echo "ecs-deploy-image=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

            # task-definition.json 파일 내용 확인
            - name: Check task definition content
              run: |
                  echo "Task Definition Content:"
                  cat chaekit-spring/task-definition.json

            - name: Create ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: "chaekit-spring/task-definition.json"
                  container-name: ecs-container
                  image: ${{ steps.image-path.outputs.ecs-deploy-image }}

            - name: Deploy ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  cluster: chaekitcluster # 여러분의 ECS 클러스터 이름
                  service: ecs-service # 여러분의 ECS 서비스 이름
                  wait-for-service-stability: true
