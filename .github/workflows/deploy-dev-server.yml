name: Deploy dev server
on:
  push:
    paths:
      - "chaekit-spring/**"
    branches:
      - dev
      - chore/test-deploy

permissions:
  id-token: write
  contents: write

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: chaekit-spring
    steps:
      - uses: actions/checkout@v3
      # Java 설정
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Grant execute permission to Gradle
        run: chmod +x ./gradlew

      # 테스트 + 커버리지 체크 (실패 시 중단됨)
      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport jacocoTestCoverageVerification

      # HTML 커버리지 리포트 게시
      - name: Deploy coverage to GitHub Pages
        if: github.ref == 'refs/heads/dev' && success()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: chaekit-spring/build/reports/jacoco/test/html
          destination_dir: dev-server-test-coverage

      # AWS 로그인
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::880996438467:role/allow
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2

      #ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      #이미지를 빌드하고 ECR에 push
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: chaekit/chaekit_spirngbackend
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build Image Path
        id: image-path
        env:
          ECR_REGISTRY: 880996438467.dkr.ecr.ap-northeast-2.amazonaws.com
          ECR_REPOSITORY: chaekit/chaekit_spirngbackend
          IMAGE_TAG: latest
        run: |
          echo "ecs-deploy-image=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Create ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: chaekit-spring/chaekit-dev-task.json
          container-name: ecs-dev-container
          image: ${{ steps.image-path.outputs.ecs-deploy-image }}
          environment-variables: |
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            GMAIL_ADDRESS=${{ secrets.GMAIL_ADDRESS }}
            GMAIL_PASSWORD=${{ secrets.GMAIL_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY }}

      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: chaekit-spring-dev-cluster # 여러분의 ECS 클러스터 이름
          service: chaekit-spring-dev-cluster-service # 여러분의 ECS 서비스 이름
          wait-for-service-stability: true
